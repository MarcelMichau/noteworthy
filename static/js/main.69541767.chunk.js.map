{"version":3,"sources":["spotifyApi.js","MainMenuBar.js","Stage.js","App.js","serviceWorker.js","index.js"],"names":["login","redirectUri","window","location","hostname","protocol","host","getUserDetail","a","console","log","accessToken","localStorage","getItem","fetch","headers","Authorization","response","json","data","getUserTracks","url","next","tracks","items","concat","getCurrentlyPlaying","status","setPlayingTrack","track","method","body","JSON","stringify","uris","uri","text","MainMenuBar","isAuthorized","userData","currentlyPlaying","onLogin","onLogout","Menu","inverted","fixed","Item","header","active","style","backgroundColor","position","item","Icon","name","artists","id","Image","src","images","size","circular","display_name","Button","onClick","stageStyles","marginTop","Stage","children","App","hasBeenAuthorized","useState","setIsAuthorized","setUserData","userTracks","setUserTracks","setCurrentlyPlaying","isLoading","setLoading","useEffect","hash","result","substr","split","reduce","parts","setItem","href","origin","authCallback","fetchCurrentlyPlaying","fetchUserDetail","localforage","length","localTracks","iterate","value","key","iterationNumber","sort","x","y","localeCompare","forEach","map","fetchUserTracks","removeItem","logout","Dimmer","Loader","Segment","basic","Table","celled","Header","Row","HeaderCell","Body","Cell","primary","artist","join","album","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69541767.chunk.js","sourcesContent":["export const login = () => {\n\tconst url = 'https://accounts.spotify.com/authorize';\n\tconst clientId = '4b5e3eb3d3d643daa7f8bfd21f074eda';\n\n\tconst redirectUri =\n\t\twindow.location.hostname === 'marcelmichau.github.io'\n\t\t\t? 'https://marcelmichau.github.io/noteworthy'\n\t\t\t: `${window.location.protocol}//${window.location.host}`;\n\n\twindow.location = `${url}?client_id=${clientId}&response_type=token&redirect_uri=${redirectUri}&scope=user-library-read user-read-currently-playing user-modify-playback-state`;\n};\n\nexport const logout = setIsAuthorized => {\n\tlocalStorage.removeItem('access_token');\n\n\tsetIsAuthorized(false);\n};\n\nexport const getUserDetail = async () => {\n\tconsole.log('get user detail called');\n\n\tconst url = 'https://api.spotify.com/v1/me';\n\n\tconst accessToken = localStorage.getItem('access_token');\n\n\tconst response = await fetch(url, {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t}\n\t});\n\n\tconst data = await response.json();\n\n\tconsole.log(data);\n\n\treturn data;\n};\n\nexport const getUserTracks = async () => {\n\tconsole.log('get user artists called');\n\n\tlet url = 'https://api.spotify.com/v1/me/tracks?limit=50';\n\n\tconst accessToken = localStorage.getItem('access_token');\n\n\tconst response = await fetch(url, {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t}\n\t});\n\n\tlet data = await response.json();\n\n\turl = data.next;\n\n\tconsole.log('next url', url);\n\n\tlet tracks = data.items;\n\n\twhile (url !== null) {\n\t\tconst response = await fetch(url, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t\t}\n\t\t});\n\n\t\tconst data = await response.json();\n\n\t\ttracks = tracks.concat(data.items);\n\n\t\turl = data.next;\n\n\t\tconsole.log('next url', url);\n\t}\n\n\treturn tracks;\n};\n\nexport const getCurrentlyPlaying = async () => {\n\tconsole.log('get currently playing called');\n\n\tconst url = 'https://api.spotify.com/v1/me/player/currently-playing';\n\n\tconst accessToken = localStorage.getItem('access_token');\n\n\tconst response = await fetch(url, {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t}\n\t});\n\n\tif (response.status !== 200) return;\n\n\tconst data = await response.json();\n\n\tconsole.log(data);\n\n\treturn data;\n};\n\nexport const setPlayingTrack = async track => {\n\tconsole.log('set playing track called');\n\n\tconst url = 'https://api.spotify.com/v1/me/player/play';\n\n\tconst accessToken = localStorage.getItem('access_token');\n\n\tconst response = await fetch(url, {\n\t\tmethod: 'PUT',\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\turis: [track.uri]\n\t\t})\n\t});\n\n\tconst data = await response.text();\n\n\treturn data;\n};\n","import React from 'react';\nimport { Icon, Menu, Image, Button } from 'semantic-ui-react';\n\nconst MainMenuBar = ({\n\tisAuthorized,\n\tuserData,\n\tcurrentlyPlaying,\n\tonLogin,\n\tonLogout\n}) => (\n\t<Menu inverted fixed=\"top\">\n\t\t<Menu.Item\n\t\t\theader\n\t\t\tactive\n\t\t\tstyle={{\n\t\t\t\tbackgroundColor: '#1DB954'\n\t\t\t}}\n\t\t>\n\t\t\tnoteworthy for Spotify\n\t\t</Menu.Item>\n\n\t\t<Menu.Menu position=\"right\">\n\t\t\t{isAuthorized && (\n\t\t\t\t<>\n\t\t\t\t\t{currentlyPlaying && currentlyPlaying.item && (\n\t\t\t\t\t\t<Menu.Item>\n\t\t\t\t\t\t\t<Icon name=\"play\" /> {currentlyPlaying.item.artists[0].name} -{' '}\n\t\t\t\t\t\t\t{currentlyPlaying.item.name}\n\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t)}\n\t\t\t\t\t{userData.id && (\n\t\t\t\t\t\t<Menu.Item>\n\t\t\t\t\t\t\t<Image src={userData.images[0].url} size=\"mini\" circular />\n\t\t\t\t\t\t\t{userData.display_name}\n\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{isAuthorized && (\n\t\t\t\t<Menu.Item>\n\t\t\t\t\t<Button onClick={onLogout}>Logout</Button>\n\t\t\t\t</Menu.Item>\n\t\t\t)}\n\t\t\t{!isAuthorized && (\n\t\t\t\t<Menu.Item>\n\t\t\t\t\t<Button onClick={onLogin}>Login</Button>\n\t\t\t\t</Menu.Item>\n\t\t\t)}\n\t\t</Menu.Menu>\n\t</Menu>\n);\n\nexport default MainMenuBar;\n","import React from 'react';\n\nconst stageStyles = {\n\tmarginTop: '4em'\n};\n\nconst Stage = ({ children }) => {\n\treturn <div style={stageStyles}>{children}</div>;\n};\n\nexport default Stage;\n","import React, { useState, useEffect } from 'react';\nimport {\n\tlogin,\n\tlogout,\n\tgetUserDetail,\n\tgetUserTracks,\n\tgetCurrentlyPlaying,\n\tsetPlayingTrack\n} from './spotifyApi';\nimport MainMenuBar from './MainMenuBar';\nimport Stage from './Stage';\nimport {\n\tSegment,\n\tButton,\n\tIcon,\n\tTable,\n\tDimmer,\n\tLoader\n} from 'semantic-ui-react';\nimport localforage from 'localforage';\n\nconst authCallback = () => {\n\tlet hash = window.location.hash.substr(1);\n\n\tlet result = hash.split('&').reduce(function(result, item) {\n\t\tlet parts = item.split('=');\n\t\tresult[parts[0]] = parts[1];\n\t\treturn result;\n\t}, {});\n\n\tconsole.log(result);\n\n\tlocalStorage.setItem('access_token', result['access_token']);\n\n\tif (window.location.hostname === 'marcelmichau.github.io') {\n\t\twindow.location.href = `${window.location.origin}/noteworthy`;\n\t} else {\n\t\twindow.location.href = window.location.origin;\n\t}\n\n\treturn result;\n};\n\nfunction App() {\n\tconst hasBeenAuthorized = localStorage.getItem('access_token') !== null;\n\n\tconst [isAuthorized, setIsAuthorized] = useState(hasBeenAuthorized);\n\n\tconst [userData, setUserData] = useState({});\n\n\tconst [userTracks, setUserTracks] = useState({ items: 0 });\n\n\tconst [currentlyPlaying, setCurrentlyPlaying] = useState(null);\n\n\tconst [isLoading, setLoading] = useState(false);\n\n\tuseEffect(() => {\n\t\tif (window.location.hash) {\n\t\t\tsetIsAuthorized(authCallback());\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tasync function fetchCurrentlyPlaying() {\n\t\t\tconst result = await getCurrentlyPlaying();\n\t\t\tsetCurrentlyPlaying(result);\n\t\t}\n\n\t\tif (isAuthorized) fetchCurrentlyPlaying();\n\t}, [isAuthorized]);\n\n\tuseEffect(() => {\n\t\tasync function fetchUserDetail() {\n\t\t\tconst result = await getUserDetail();\n\t\t\tsetUserData(result);\n\t\t}\n\n\t\tif (isAuthorized) fetchUserDetail();\n\t}, [isAuthorized]);\n\n\tuseEffect(() => {\n\t\tasync function fetchUserTracks() {\n\t\t\tsetLoading(true);\n\n\t\t\tconst numberOfKeys = await localforage.length();\n\n\t\t\tif (numberOfKeys > 0) {\n\t\t\t\tlet localTracks = [];\n\n\t\t\t\tawait localforage.iterate((value, key, iterationNumber) => {\n\t\t\t\t\tlocalTracks = localTracks.concat(value);\n\t\t\t\t});\n\n\t\t\t\tlocalTracks = localTracks.sort((x, y) =>\n\t\t\t\t\tx.artists[0].name.localeCompare(y.artists[0].name)\n\t\t\t\t);\n\n\t\t\t\tsetUserTracks(localTracks);\n\t\t\t} else {\n\t\t\t\tconst tracks = await getUserTracks();\n\n\t\t\t\ttracks.forEach(async track => {\n\t\t\t\t\tawait localforage.setItem(track.track.id, track.track);\n\t\t\t\t});\n\n\t\t\t\tsetUserTracks(\n\t\t\t\t\ttracks\n\t\t\t\t\t\t.map(track => track.track)\n\t\t\t\t\t\t.sort((x, y) => x.artists[0].name.localeCompare(y.artists[0].name))\n\t\t\t\t);\n\t\t\t}\n\t\t\tsetLoading(false);\n\t\t}\n\n\t\tif (isAuthorized) fetchUserTracks();\n\t}, [isAuthorized]);\n\n\treturn (\n\t\t<>\n\t\t\t<MainMenuBar\n\t\t\t\tisAuthorized={isAuthorized}\n\t\t\t\tuserData={userData}\n\t\t\t\tcurrentlyPlaying={currentlyPlaying}\n\t\t\t\tonLogin={login}\n\t\t\t\tonLogout={() => logout(setIsAuthorized)}\n\t\t\t></MainMenuBar>\n\t\t\t{isLoading && (\n\t\t\t\t<Dimmer active inverted>\n\t\t\t\t\t<Loader inverted>Loading Tracks...</Loader>\n\t\t\t\t</Dimmer>\n\t\t\t)}\n\t\t\t<Segment basic>\n\t\t\t\t{isAuthorized && (\n\t\t\t\t\t<Stage>\n\t\t\t\t\t\t{userTracks.length > 0 && (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h2>Total Tracks: {userTracks.length}</h2>\n\t\t\t\t\t\t\t\t<Table celled>\n\t\t\t\t\t\t\t\t\t<Table.Header>\n\t\t\t\t\t\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t\t\t\t\t\t<Table.HeaderCell></Table.HeaderCell>\n\t\t\t\t\t\t\t\t\t\t\t<Table.HeaderCell>Artists</Table.HeaderCell>\n\t\t\t\t\t\t\t\t\t\t\t<Table.HeaderCell>Track Name</Table.HeaderCell>\n\t\t\t\t\t\t\t\t\t\t\t<Table.HeaderCell>Album</Table.HeaderCell>\n\t\t\t\t\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t\t\t\t\t</Table.Header>\n\t\t\t\t\t\t\t\t\t<Table.Body>\n\t\t\t\t\t\t\t\t\t\t{userTracks.map(track => (\n\t\t\t\t\t\t\t\t\t\t\t<Table.Row key={track.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprimary\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tawait setPlayingTrack(track);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst result = await getCurrentlyPlaying();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetCurrentlyPlaying(result);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Icon name=\"play\" /> Play\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{track.artists.map(artist => artist.name).join(', ')}\n\t\t\t\t\t\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t\t\t\t\t\t<Table.Cell>{track.name}</Table.Cell>\n\t\t\t\t\t\t\t\t\t\t\t\t<Table.Cell>{track.album.name}</Table.Cell>\n\t\t\t\t\t\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</Table.Body>\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Stage>\n\t\t\t\t)}\n\t\t\t</Segment>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}