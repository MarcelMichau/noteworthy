{"version":3,"sources":["spotifyApi.js","MainMenuBar.js","App.js","serviceWorker.js","index.js"],"names":["login","redirectUri","window","location","hostname","getUserDetail","a","console","log","accessToken","localStorage","getItem","fetch","headers","Authorization","response","json","data","getCurrentlyPlaying","status","setPlayingTrack","track","method","body","JSON","stringify","uris","uri","text","MainMenuBar","isAuthorized","userData","currentlyPlaying","onLogin","onLogout","Menu","inverted","fixed","Item","header","active","color","position","item","Icon","name","artists","id","Image","src","images","url","size","circular","display_name","Button","onClick","App","hasBeenAuthorized","useState","setIsAuthorized","setUserData","items","userTracks","setCurrentlyPlaying","useEffect","hash","result","substr","split","reduce","parts","setItem","href","origin","authCallback","fetchCurrentlyPlaying","fetchUserDetail","removeItem","logout","length","map","key","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65d4f99e.chunk.js","sourcesContent":["export const login = () => {\r\n\tconst url = 'https://accounts.spotify.com/authorize';\r\n\tconst clientId = '4b5e3eb3d3d643daa7f8bfd21f074eda';\r\n\r\n\tconst redirectUri =\r\n\t\twindow.location.hostname === 'marcelmichau.github.io'\r\n\t\t\t? 'https://marcelmichau.github.io/spotiview'\r\n\t\t\t: 'http://localhost:3000';\r\n\r\n\twindow.location = `${url}?client_id=${clientId}&response_type=token&redirect_uri=${redirectUri}&scope=user-library-read user-read-currently-playing user-modify-playback-state`;\r\n};\r\n\r\nexport const logout = setIsAuthorized => {\r\n\tlocalStorage.removeItem('access_token');\r\n\r\n\tsetIsAuthorized(false);\r\n};\r\n\r\nexport const getUserDetail = async () => {\r\n\tconsole.log('get user detail called');\r\n\r\n\tconst url = 'https://api.spotify.com/v1/me';\r\n\r\n\tconst accessToken = localStorage.getItem('access_token');\r\n\r\n\tconst response = await fetch(url, {\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${accessToken}`\r\n\t\t}\r\n\t});\r\n\r\n\tconst data = await response.json();\r\n\r\n\tconsole.log(data);\r\n\r\n\treturn data;\r\n};\r\n\r\nexport const getUserTracks = async setUserTracks => {\r\n\tconsole.log('get user artists called');\r\n\r\n\tconst url = 'https://api.spotify.com/v1/me/tracks?limit=50';\r\n\r\n\tconst accessToken = localStorage.getItem('access_token');\r\n\r\n\tconst response = await fetch(url, {\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${accessToken}`\r\n\t\t}\r\n\t});\r\n\r\n\tconst data = await response.json();\r\n\r\n\tconsole.log(data);\r\n\r\n\tsetUserTracks(data);\r\n\r\n\treturn data;\r\n};\r\n\r\nexport const getCurrentlyPlaying = async () => {\r\n\tconsole.log('get currently playing called');\r\n\r\n\tconst url = 'https://api.spotify.com/v1/me/player/currently-playing';\r\n\r\n\tconst accessToken = localStorage.getItem('access_token');\r\n\r\n\tconst response = await fetch(url, {\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${accessToken}`\r\n\t\t}\r\n\t});\r\n\r\n\tif (response.status !== 200) return;\r\n\r\n\tconst data = await response.json();\r\n\r\n\tconsole.log(data);\r\n\r\n\treturn data;\r\n};\r\n\r\nexport const setPlayingTrack = async track => {\r\n\tconsole.log('set playing track called');\r\n\r\n\tconst url = 'https://api.spotify.com/v1/me/player/play';\r\n\r\n\tconst accessToken = localStorage.getItem('access_token');\r\n\r\n\tconst response = await fetch(url, {\r\n\t\tmethod: 'PUT',\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${accessToken}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\turis: [track.uri]\r\n\t\t})\r\n\t});\r\n\r\n\tconst data = await response.text();\r\n\r\n\treturn data;\r\n};\r\n","import React from 'react';\r\nimport { Icon, Menu, Image, Button } from 'semantic-ui-react';\r\n\r\nconst MainMenuBar = ({\r\n\tisAuthorized,\r\n\tuserData,\r\n\tcurrentlyPlaying,\r\n\tonLogin,\r\n\tonLogout\r\n}) => (\r\n\t<Menu inverted fixed=\"top\">\r\n\t\t<Menu.Item header active color=\"green\">\r\n\t\t\tSpotiview\r\n\t\t</Menu.Item>\r\n\r\n\t\t<Menu.Menu position=\"right\">\r\n\t\t\t{isAuthorized && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t{currentlyPlaying && currentlyPlaying.item && (\r\n\t\t\t\t\t\t<Menu.Item>\r\n\t\t\t\t\t\t\t<Icon name=\"play\" /> {currentlyPlaying.item.artists[0].name} -{' '}\r\n\t\t\t\t\t\t\t{currentlyPlaying.item.name}\r\n\t\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{userData.id && (\r\n\t\t\t\t\t\t<Menu.Item>\r\n\t\t\t\t\t\t\t<Image src={userData.images[0].url} size=\"mini\" circular />\r\n\t\t\t\t\t\t\t{userData.display_name}\r\n\t\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t\t{isAuthorized && (\r\n\t\t\t\t<Menu.Item>\r\n\t\t\t\t\t<Button onClick={onLogout}>Logout</Button>\r\n\t\t\t\t</Menu.Item>\r\n\t\t\t)}\r\n\t\t\t{!isAuthorized && (\r\n\t\t\t\t<Menu.Item>\r\n\t\t\t\t\t<Button onClick={onLogin}>Login</Button>\r\n\t\t\t\t</Menu.Item>\r\n\t\t\t)}\r\n\t\t</Menu.Menu>\r\n\t</Menu>\r\n);\r\n\r\nexport default MainMenuBar;\r\n","import React, { useState, useEffect } from 'react';\nimport {\n\tlogin,\n\tlogout,\n\tgetUserDetail,\n\tgetUserTracks,\n\tgetCurrentlyPlaying,\n\tsetPlayingTrack\n} from './spotifyApi';\nimport MainMenuBar from './MainMenuBar';\n\nconst authCallback = () => {\n\tlet hash = window.location.hash.substr(1);\n\n\tlet result = hash.split('&').reduce(function(result, item) {\n\t\tlet parts = item.split('=');\n\t\tresult[parts[0]] = parts[1];\n\t\treturn result;\n\t}, {});\n\n\tconsole.log(result);\n\n\tlocalStorage.setItem('access_token', result['access_token']);\n\n\tif (window.location.hostname === 'marcelmichau.github.io') {\n\t\twindow.location.href = `${window.location.origin}/spotiview`;\n\t} else {\n\t\twindow.location.href = window.location.origin;\n\t}\n\n\treturn result;\n};\n\nfunction App() {\n\tconst hasBeenAuthorized = localStorage.getItem('access_token') !== null;\n\n\tconst [isAuthorized, setIsAuthorized] = useState(hasBeenAuthorized);\n\n\tconst [userData, setUserData] = useState({});\n\n\tconst [userTracks, setUserTracks] = useState({ items: 0 });\n\n\tconst [currentlyPlaying, setCurrentlyPlaying] = useState(null);\n\n\tuseEffect(() => {\n\t\tif (window.location.hash) {\n\t\t\tsetIsAuthorized(authCallback());\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tasync function fetchCurrentlyPlaying() {\n\t\t\tconst result = await getCurrentlyPlaying();\n\t\t\tsetCurrentlyPlaying(result);\n\t\t}\n\n\t\tif (isAuthorized) fetchCurrentlyPlaying();\n\t}, [isAuthorized]);\n\n\tuseEffect(() => {\n\t\tasync function fetchUserDetail() {\n\t\t\tconst result = await getUserDetail();\n\t\t\tsetUserData(result);\n\t\t}\n\n\t\tif (isAuthorized) fetchUserDetail();\n\t}, [isAuthorized]);\n\n\treturn (\n\t\t<div>\n\t\t\t<MainMenuBar\n\t\t\t\tisAuthorized={isAuthorized}\n\t\t\t\tuserData={userData}\n\t\t\t\tcurrentlyPlaying={currentlyPlaying}\n\t\t\t\tonLogin={login}\n\t\t\t\tonLogout={() => logout(setIsAuthorized)}\n\t\t\t></MainMenuBar>\n\t\t\t{isAuthorized && (\n\t\t\t\t<div>\n\t\t\t\t\t{userTracks.items.length > 0 && (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{userTracks.items.map(item => (\n\t\t\t\t\t\t\t\t<div key={item.track.id}>\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t{item.track.artists[0].name} - {item.track.name}:{' '}\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\t\t\t\tawait setPlayingTrack(item.track);\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst result = await getCurrentlyPlaying();\n\t\t\t\t\t\t\t\t\t\t\t\tsetCurrentlyPlaying(result);\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tPlay\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}