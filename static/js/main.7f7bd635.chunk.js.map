{"version":3,"sources":["spotifyApi.js","MainMenuBar.js","App.js","serviceWorker.js","index.js"],"names":["login","redirectUri","window","location","hostname","protocol","host","getUserDetail","a","console","log","accessToken","localStorage","getItem","fetch","headers","Authorization","response","json","data","getUserTracks","getCurrentlyPlaying","status","setPlayingTrack","track","method","body","JSON","stringify","uris","uri","text","MainMenuBar","isAuthorized","userData","currentlyPlaying","onLogin","onLogout","Menu","inverted","fixed","Item","header","active","style","backgroundColor","position","item","Icon","name","artists","id","Image","src","images","url","size","circular","display_name","Button","onClick","App","hasBeenAuthorized","useState","setIsAuthorized","setUserData","items","userTracks","setUserTracks","setCurrentlyPlaying","useEffect","hash","result","substr","split","reduce","parts","setItem","href","origin","authCallback","fetchCurrentlyPlaying","fetchUserDetail","fetchUserTracks","removeItem","logout","length","map","key","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f7bd635.chunk.js","sourcesContent":["export const login = () => {\r\n\tconst url = 'https://accounts.spotify.com/authorize';\r\n\tconst clientId = '4b5e3eb3d3d643daa7f8bfd21f074eda';\r\n\r\n\tconst redirectUri =\r\n\t\twindow.location.hostname === 'marcelmichau.github.io'\r\n\t\t\t? 'https://marcelmichau.github.io/noteworthy'\r\n\t\t\t: `${window.location.protocol}//${window.location.host}`;\r\n\r\n\twindow.location = `${url}?client_id=${clientId}&response_type=token&redirect_uri=${redirectUri}&scope=user-library-read user-read-currently-playing user-modify-playback-state`;\r\n};\r\n\r\nexport const logout = setIsAuthorized => {\r\n\tlocalStorage.removeItem('access_token');\r\n\r\n\tsetIsAuthorized(false);\r\n};\r\n\r\nexport const getUserDetail = async () => {\r\n\tconsole.log('get user detail called');\r\n\r\n\tconst url = 'https://api.spotify.com/v1/me';\r\n\r\n\tconst accessToken = localStorage.getItem('access_token');\r\n\r\n\tconst response = await fetch(url, {\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${accessToken}`\r\n\t\t}\r\n\t});\r\n\r\n\tconst data = await response.json();\r\n\r\n\tconsole.log(data);\r\n\r\n\treturn data;\r\n};\r\n\r\nexport const getUserTracks = async () => {\r\n\tconsole.log('get user artists called');\r\n\r\n\tconst url = 'https://api.spotify.com/v1/me/tracks?limit=50';\r\n\r\n\tconst accessToken = localStorage.getItem('access_token');\r\n\r\n\tconst response = await fetch(url, {\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${accessToken}`\r\n\t\t}\r\n\t});\r\n\r\n\tconst data = await response.json();\r\n\r\n\tconsole.log(data);\r\n\r\n\treturn data;\r\n};\r\n\r\nexport const getCurrentlyPlaying = async () => {\r\n\tconsole.log('get currently playing called');\r\n\r\n\tconst url = 'https://api.spotify.com/v1/me/player/currently-playing';\r\n\r\n\tconst accessToken = localStorage.getItem('access_token');\r\n\r\n\tconst response = await fetch(url, {\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${accessToken}`\r\n\t\t}\r\n\t});\r\n\r\n\tif (response.status !== 200) return;\r\n\r\n\tconst data = await response.json();\r\n\r\n\tconsole.log(data);\r\n\r\n\treturn data;\r\n};\r\n\r\nexport const setPlayingTrack = async track => {\r\n\tconsole.log('set playing track called');\r\n\r\n\tconst url = 'https://api.spotify.com/v1/me/player/play';\r\n\r\n\tconst accessToken = localStorage.getItem('access_token');\r\n\r\n\tconst response = await fetch(url, {\r\n\t\tmethod: 'PUT',\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${accessToken}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\turis: [track.uri]\r\n\t\t})\r\n\t});\r\n\r\n\tconst data = await response.text();\r\n\r\n\treturn data;\r\n};\r\n","import React from 'react';\r\nimport { Icon, Menu, Image, Button } from 'semantic-ui-react';\r\n\r\nconst MainMenuBar = ({\r\n\tisAuthorized,\r\n\tuserData,\r\n\tcurrentlyPlaying,\r\n\tonLogin,\r\n\tonLogout\r\n}) => (\r\n\t<Menu inverted fixed=\"top\">\r\n\t\t<Menu.Item header active style={{\r\n\t\t\tbackgroundColor: '#1DB954'\r\n\t\t}}>\t\t\t\r\n\t\t\tnoteworthy for Spotify\r\n\t\t</Menu.Item>\r\n\r\n\t\t<Menu.Menu position=\"right\">\r\n\t\t\t{isAuthorized && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t{currentlyPlaying && currentlyPlaying.item && (\r\n\t\t\t\t\t\t<Menu.Item>\r\n\t\t\t\t\t\t\t<Icon name=\"play\" /> {currentlyPlaying.item.artists[0].name} -{' '}\r\n\t\t\t\t\t\t\t{currentlyPlaying.item.name}\r\n\t\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{userData.id && (\r\n\t\t\t\t\t\t<Menu.Item>\r\n\t\t\t\t\t\t\t<Image src={userData.images[0].url} size=\"mini\" circular />\r\n\t\t\t\t\t\t\t{userData.display_name}\r\n\t\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t\t{isAuthorized && (\r\n\t\t\t\t<Menu.Item>\r\n\t\t\t\t\t<Button onClick={onLogout}>Logout</Button>\r\n\t\t\t\t</Menu.Item>\r\n\t\t\t)}\r\n\t\t\t{!isAuthorized && (\r\n\t\t\t\t<Menu.Item>\r\n\t\t\t\t\t<Button onClick={onLogin}>Login</Button>\r\n\t\t\t\t</Menu.Item>\r\n\t\t\t)}\r\n\t\t</Menu.Menu>\r\n\t</Menu>\r\n);\r\n\r\nexport default MainMenuBar;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n\tlogin,\r\n\tlogout,\r\n\tgetUserDetail,\r\n\tgetUserTracks,\r\n\tgetCurrentlyPlaying,\r\n\tsetPlayingTrack\r\n} from './spotifyApi';\r\nimport MainMenuBar from './MainMenuBar';\r\nimport { Button, Icon } from 'semantic-ui-react';\r\n\r\nconst authCallback = () => {\r\n\tlet hash = window.location.hash.substr(1);\r\n\r\n\tlet result = hash.split('&').reduce(function(result, item) {\r\n\t\tlet parts = item.split('=');\r\n\t\tresult[parts[0]] = parts[1];\r\n\t\treturn result;\r\n\t}, {});\r\n\r\n\tconsole.log(result);\r\n\r\n\tlocalStorage.setItem('access_token', result['access_token']);\r\n\r\n\tif (window.location.hostname === 'marcelmichau.github.io') {\r\n\t\twindow.location.href = `${window.location.origin}/noteworthy`;\r\n\t} else {\r\n\t\twindow.location.href = window.location.origin;\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nfunction App() {\r\n\tconst hasBeenAuthorized = localStorage.getItem('access_token') !== null;\r\n\r\n\tconst [isAuthorized, setIsAuthorized] = useState(hasBeenAuthorized);\r\n\r\n\tconst [userData, setUserData] = useState({});\r\n\r\n\tconst [userTracks, setUserTracks] = useState({ items: 0 });\r\n\r\n\tconst [currentlyPlaying, setCurrentlyPlaying] = useState(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (window.location.hash) {\r\n\t\t\tsetIsAuthorized(authCallback());\r\n\t\t}\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function fetchCurrentlyPlaying() {\r\n\t\t\tconst result = await getCurrentlyPlaying();\r\n\t\t\tsetCurrentlyPlaying(result);\r\n\t\t}\r\n\r\n\t\tif (isAuthorized) fetchCurrentlyPlaying();\r\n\t}, [isAuthorized]);\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function fetchUserDetail() {\r\n\t\t\tconst result = await getUserDetail();\r\n\t\t\tsetUserData(result);\r\n\t\t}\r\n\r\n\t\tif (isAuthorized) fetchUserDetail();\r\n\t}, [isAuthorized]);\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function fetchUserTracks() {\r\n\t\t\tconst result = await getUserTracks();\r\n\t\t\tsetUserTracks(result);\r\n\t\t}\r\n\r\n\t\tif (isAuthorized) fetchUserTracks();\r\n\t}, [isAuthorized]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<MainMenuBar\r\n\t\t\t\tisAuthorized={isAuthorized}\r\n\t\t\t\tuserData={userData}\r\n\t\t\t\tcurrentlyPlaying={currentlyPlaying}\r\n\t\t\t\tonLogin={login}\r\n\t\t\t\tonLogout={() => logout(setIsAuthorized)}\r\n\t\t\t></MainMenuBar>\r\n\t\t\t{isAuthorized && (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{userTracks.items.length > 0 && (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h2>Recent Tracks</h2>\r\n\t\t\t\t\t\t\t{userTracks.items.map(item => (\r\n\t\t\t\t\t\t\t\t<div key={item.track.id}>\r\n\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={async () => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tawait setPlayingTrack(item.track);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst result = await getCurrentlyPlaying();\r\n\t\t\t\t\t\t\t\t\t\t\t\tsetCurrentlyPlaying(result);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Icon name=\"play\" />\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t{item.track.artists[0].name} - {item.track.name}:{' '}\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}