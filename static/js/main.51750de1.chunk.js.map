{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["login","window","location","getUserDetail","setUserData","a","console","log","accessToken","localStorage","getItem","fetch","headers","Authorization","response","json","data","getUserTracks","setUserTracks","getCurrentlyPlaying","status","setPlayingTrack","track","method","body","JSON","stringify","uris","uri","text","App","hasBeenAuthorized","useState","isAuthorized","setIsAuthorized","userData","items","userTracks","currentlyPlaying","setCurrentlyPlaying","useEffect","hash","result","substr","split","reduce","item","parts","setItem","href","origin","authCallback","fetchCurrentlyPlaying","className","artists","name","onClick","removeItem","logout","id","display_name","src","images","url","alt","length","map","key","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51750de1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst login = () => {\n\tconst url = 'https://accounts.spotify.com/authorize';\n\tconst clientId = '4b5e3eb3d3d643daa7f8bfd21f074eda';\n\n\twindow.location = `${url}?client_id=${clientId}&response_type=token&redirect_uri=http://localhost:3000&scope=user-library-read user-read-currently-playing user-modify-playback-state`;\n};\n\nconst logout = setIsAuthorized => {\n\tlocalStorage.removeItem('access_token');\n\n\tsetIsAuthorized(false);\n};\n\nconst authCallback = () => {\n\tlet hash = window.location.hash.substr(1);\n\n\tlet result = hash.split('&').reduce(function(result, item) {\n\t\tlet parts = item.split('=');\n\t\tresult[parts[0]] = parts[1];\n\t\treturn result;\n\t}, {});\n\n\tconsole.log(result);\n\n\tlocalStorage.setItem('access_token', result['access_token']);\n\n\twindow.location.href = window.location.origin;\n\n\treturn result;\n};\n\nconst getUserDetail = async setUserData => {\n\tconsole.log('get user detail called');\n\n\tconst url = 'https://api.spotify.com/v1/me';\n\n\tconst accessToken = localStorage.getItem('access_token');\n\n\tconst response = await fetch(url, {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t}\n\t});\n\n\tconst data = await response.json();\n\n\tconsole.log(data);\n\n\tsetUserData(data);\n\n\treturn data;\n};\n\nconst getUserTracks = async setUserTracks => {\n\tconsole.log('get user artists called');\n\n\tconst url = 'https://api.spotify.com/v1/me/tracks?limit=50';\n\n\tconst accessToken = localStorage.getItem('access_token');\n\n\tconst response = await fetch(url, {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t}\n\t});\n\n\tconst data = await response.json();\n\n\tconsole.log(data);\n\n\tsetUserTracks(data);\n\n\treturn data;\n};\n\nconst getCurrentlyPlaying = async () => {\n\tconsole.log('get currently playing called');\n\n\tconst url = 'https://api.spotify.com/v1/me/player/currently-playing';\n\n\tconst accessToken = localStorage.getItem('access_token');\n\n\tconst response = await fetch(url, {\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t}\n\t});\n\n\tif (response.status !== 200) return;\n\n\tconst data = await response.json();\n\n\tconsole.log(data);\n\n\treturn data;\n};\n\nconst setPlayingTrack = async track => {\n\tconsole.log('set playing track called');\n\n\tconst url = 'https://api.spotify.com/v1/me/player/play';\n\n\tconst accessToken = localStorage.getItem('access_token');\n\n\tconst response = await fetch(url, {\n\t\tmethod: 'PUT',\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\turis: [track.uri]\n\t\t})\n\t});\n\n\tconst data = await response.text();\n\n\treturn data;\n};\n\nfunction App() {\n\tconst hasBeenAuthorized = localStorage.getItem('access_token') !== null;\n\n\tconst [isAuthorized, setIsAuthorized] = useState(hasBeenAuthorized);\n\n\tconst [userData, setUserData] = useState({});\n\n\tconst [userTracks, setUserTracks] = useState({ items: 0 });\n\n\tconst [currentlyPlaying, setCurrentlyPlaying] = useState(null);\n\n\tuseEffect(() => {\n\t\tif (window.location.hash) {\n\t\t\tsetIsAuthorized(authCallback());\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tasync function fetchCurrentlyPlaying() {\n\t\t\tconst result = await getCurrentlyPlaying();\n\t\t\tsetCurrentlyPlaying(result);\n\t\t}\n\n\t\tif (isAuthorized) fetchCurrentlyPlaying();\n\t}, [isAuthorized]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<p>Spotiview</p>\n\t\t\t\t{isAuthorized ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{currentlyPlaying && currentlyPlaying.item && (\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tCurrently Playing: {currentlyPlaying.item.artists[0].name} -{' '}\n\t\t\t\t\t\t\t\t{currentlyPlaying.item.name}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<button onClick={() => getUserDetail(setUserData)}>\n\t\t\t\t\t\t\tGet User Details\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button onClick={() => getUserTracks(setUserTracks)}>\n\t\t\t\t\t\t\tGet Recent Tracks\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button onClick={() => logout(setIsAuthorized)}>Logout</button>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<button onClick={login}>Login With Spotify</button>\n\t\t\t\t)}\n\t\t\t</header>\n\t\t\t{isAuthorized && (\n\t\t\t\t<div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{userData.id && (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<h2>{userData.display_name}</h2>\n\t\t\t\t\t\t\t\t<img src={userData.images[0].url} alt=\"\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{userTracks.items.length > 0 && (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{userTracks.items.map(item => (\n\t\t\t\t\t\t\t\t\t<div key={item.track.id}>\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t{item.track.artists[0].name} - {item.track.name}:{' '}\n\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait setPlayingTrack(item.track);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst result = await getCurrentlyPlaying();\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetCurrentlyPlaying(result);\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tPlay\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}